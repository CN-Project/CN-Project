Peer.class
	Variables:
        private String peerId;

        private String hostName;

        private String listeningPort;

        private boolean hasFileOrNot;

        private int numOfPiece;

        private boolean[] bitFieldSelf;

        /** Store downloaded file pieces in fileStore[int index][byte[] content]. */
        private byte[][] fileStore;

        /** A peer will keep its own bitfield info and neighbors' bitfield info, and its interested list */
        private Set<Peer> interestedList = new HashSet<>();

        private Map<String, boolean[]> bitFieldNeighbor = new HashMap<>();

        /** Every peer will keep the server that it has already connected with as < serverPeerID, ClientConnectionThread > */
        private Map<String, Client> connectedServerMap = new HashMap<>();

        /** determine the bitField Msg is the first time or the second time to be received */
        private boolean hasReceivedBitFieldMsgOnce = true;

        /** used in response bitField, if the server has no pieces at all, it has no need to send bitFieldMsg back */
        private boolean hasPiecesOrNot = false;

    Functions:
    	set..
    	get..
    Constructors:
    	public Peer(){}
    	public Peer(int numOfPiece) {}
    	public Peer(String peerId, String hostName, String listeningPort, boolean hasFileOrNot, int numOfPiece) {}
    

Size:
        numOfPiece.size = 306;
        fileStore.size = 306;
        bitfield.size = 312;
        bitFieldPayload.size = 39;
